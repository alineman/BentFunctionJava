\clearpage
\section{Заключение}
\label{conclusion}

 
В процессе подготовки дипломной работы были написаны программы на языке Java: реализующие алгоритм Канто~\ref{AlgoCanto} и алгоритм Джана--Сяо~\ref{China}; также несколько вспомогательных программ: генерация произвольной булевой функции от заданного числа переменных~\ref{randomGenerator}, тривиальный алгоритм проверки на нормальность~\ref{trivial}, генерация и сохранение всех возможных GJB($n,m$).

Сейчас вывод всех плоскостей заданной размерности, на которых функция аффинна, для функции 9 переменных занимает около двух минут.
Проверка анормальности полным перебором всех необходимых плоскостей сейчас занимает около 20-40 секунд для анормальной функции от 9 переменных.
Проверка с помощью Алгоритма Канто~\ref{AlgoCanto} заведомо слабо-анормальной функции (также от 9 переменных) занимает около 3 секунд.

%По найденной анормальной функции от 8 переменных была сконструирована новая функция от 10 переменных с помощью утверждения~\ref{myFunction}.
%Сейчас идет проверка на ее нормальность.

% Было отмечено, что, как правило, функция с тем большей вероятностью является анормальной, чем больше слагаемых в ее АНФ.
%Пока, к сожалению, нет достаточного количества данных, чтобы делать выводы.

%В данный момент программа находится на стадии отладки и оптимизации.
%Также будет реализован алгоритм китайских математиков~\ref{China}. 

%Был проведен вычислительный эксперимент: генерировались случайные функции от 9 переменных, делалась проверка на нормальность.
%На поиск 10 анормальных булевых функций ушло около 15 минут, всего рассматривалось 20 функций.

%Также планируется в качестве результатов работы попытаться предоставить анормальную (слабо $k$-анормальную) функцию от некоторого числа переменных ($\geqslant 8$).
% 8000000000000000000f333c051b36280000000055555555000f333c504e637c
% e111111111111111111111111111111111111111111111111111111111111111111111111111eeee11ee11ee11eeee1111111e1e111ee1ee11ee1ee111e1e111111111111111111111111111111111111e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e111111111111eeee11ee11ee11eeee111e1e11111e11eee11ee111ee1eeeee11
% [268, 732, 12, 848, 84, 80, 996, 772, 816, 44, 192, 492, 520, 544, 932, 108, 196, 660, 552, 696, 8, 488, 736, 688, 608, 0, 456, 284, 476, 340, 704, 224, 720, 432, 308, 220, 76, 380, 280, 808, 836, 100, 920, 1004, 216, 460, 32, 64, 924, 868, 784, 264, 56, 132, 16, 700, 572, 880, 240, 332, 536, 576, 168, 452, 4, 484, 88, 560, 972, 968, 540, 296, 384, 856, 360, 1012, 528, 48, 580, 508, 944, 348, 316, 888, 136, 984, 516, 652, 828, 728, 1016, 708, 980, 532, 104, 656, 548, 844, 416, 448, 788, 604, 928, 628, 24, 852, 180, 208, 600, 916, 112, 212, 188, 780, 864, 356, 776, 300, 860, 396, 312, 752, 236, 648, 712, 620, 884, 252, 568, 936, 424, 908, 820, 900, 68, 60, 668, 692, 584, 564, 676, 876, 260, 804, 956, 824, 128, 372, 256, 624, 500, 352, 764, 832, 664, 156, 896, 588, 640, 172, 368, 748, 364, 744, 160, 228, 940, 120, 716, 272, 400, 140, 904, 184, 964, 436, 480, 392, 524, 292, 672, 796, 496, 872, 164, 388, 952, 412, 200, 468, 472, 556, 892, 288, 144, 988, 756, 768, 20, 336, 840, 116, 96, 420, 376, 800, 204, 124, 612, 464, 684, 960, 344, 1008, 912, 52, 176, 504, 28, 92, 408, 792, 680, 1000, 36, 444, 592, 812, 40, 616, 948, 320, 232, 596, 440, 248, 992, 148, 324, 740, 512, 636, 976, 276, 724, 152, 244, 632, 72, 760, 3]




%Поиск 7/4 анормальных Total find/validate functions: 1000/8350


% cat 2.log | egrep -o "\".*\"" | egrep -o "[0-9,A-Z]*"


\subsection{Результаты расчетов}
\label{calculate}
\begin{itemize}

\item Для функции, которая задается следующей АНФ:\\
$
x_{3}x_{4}x_{7} \oplus x_{1}x_{2}x_{3}x_{4}x_{7}x_{8}x_{9} \oplus x_{2}x_{5}x_{6} \oplus x_{2}x_{6}x_{8} \oplus x_{1}x_{2} \oplus x_{6}x_{8} \oplus x_{2}x_{5}x_{7}x_{9} \oplus x_{9} \oplus \\
\oplus  x_{7}x_{8}x_{9} \oplus x_{4}x_{8}x_{9} \oplus x_{3}x_{4}x_{7} \oplus x_{2}x_{3}x_{6} \oplus x_{8}x_{9} \oplus x_{3} \oplus x_{1}x_{2}x_{4}x_{6}x_{7}x_{8}x_{9}.
$\\
была получена одна из плоскостей, на которой она аффинна $ b + \langle u_1, u_2, u_3, u_4, u_5 \rangle$ :
$$
001010000 + \langle 111010100, 000100100, 000001100, 000000010, 000000001 \rangle
$$
% Пример булевой функции от 8 переменных, аффинной на плоскости, задаваемой следующим $GJB$-базисом:

\item Пример анормальной функции от 9 переменных(количество слагаемых в АНФ --- 347):\\
$f(x) =$
8DD00BD1FEDEEFAE2AF42300C418C5775B2C5FA8E71A14F0EA801DF2091
613D4588BC92E80A8478776E20751B335B7D50E72B2249541990949A1FF4A9B634B75.

\item Согласно утверждениям из раздела~\ref{KasamiAll} найдены некоторые значения $\alpha,\beta$ при которых бент-функция вида~(\ref{KasamiAnormal}) переменных является анормальной:

\begin{center}
\begin{tabular}{|l|c|}
 \hline
 & $\beta$ \\
 \hline
$\alpha = 2$ & 677, 678, 1017,1018,  1020 \\
$\alpha = 4$ & 1, 15, 40\\
$\alpha = 10$ & 11, 333, 444\\
$\alpha = 14$ & 12, 15, 42\\
\hline
\end{tabular}
\end{center}
Эта проверка заняла  1~час~14~мин.
\item Был проведен вычислительный эксперимент: генерируем произвольную функцию заданной размерности, затем проверяем на $k$-нормальность.
В таблице приводится количество проверенных функций, среди которых нашлась 1000 $k$-анормальных (в скобках --- затраченное время):
\begin{center}
\begin{tabular}{|c|c|c|c|c|c|}
\hline
      & $k=4$ & $k=5$ & $k=6$ & $k=7$ & $k=8$\\
\hline
$n=7$ & 7796 (00:01:06) & 1215 (00:00:04) & 1050 & & \\
$n=8$ &      & 1299 (00:04:10) & 1094 (00:00:35) & 1039 & \\
$n=9$ &      & 1442 (06:19:01) & 1136 (00:36:38)& 1059 (00:01:37)& 1010 \\
\hline
\end{tabular}
\end{center}
\end{itemize}




\subsection{О генерировании случайных булевых функций}
\label{randomGenerator}
Для поиска анормальных функций была написана вспомогательная процедура, которая строит булеву функцию от заданного числа переменных $n$.
Алгоритм ее работы можно описать так:
\begin{itemize}
\item случайным образом выбираем количество слагаемых в АНФ;
\item генерируем случайное число $k : 0 \leqslant k  \leqslant 2^n - 1$. Это число однозначно определяет одно из слагаемых АНФ. Если такого слагаемого еще нет в АНФ, то тогда добавляем его;
%\item случайным образом генерируем одно слагаемое из АНФ. Каждое слагаемое АНФ представляется числом $0 \leqslant k  \leqslant (2^n - 1)$;
\item переходим от представления в виде АНФ к вектору значений для упрощения дальнейших расчетов.
\end{itemize}

\subsection{Тривиальный алгоритм проверки на нормальность}\label{trivial}
Для проверки результатов работы алгоритмов была написана вспомогательная программа, которая полным перебором проверяет $k$-нормальность функции $f\in\mathcal{B}_n$:
\begin{itemize}
\item сгенерировать все возможные базисы Гаусса-Жордана $L_j$ размерности $k$;
\item для всех $b \in \overline{L_j}$ делаем проверку функции на постоянство значений на плоскости $b + L_j$;
\item как только найдена плоскость, на которой функция постоянна --- выводится текущие $L_j, \,b$, работа программы прекращается.
\end{itemize}
%На проверку нормальности~\footnote{Для заведомо анормальной функции.} функции 9 переменных сейчас уходит около 80 секунд (перебор 52955952 плоскостей). Предварительные расчеты --- 18 секунд на генерацию всех возможных GJB заданной размерности в количестве 3309747 штук

\subsection{Какие-то результаты}
Расчет в Mapple всех функций вида $f(x) = Tr(\alpha x^{57} + \beta x),\, \alpha \in F_4\setminus F_2,\, \beta \in F_{2^{10}}$ занял примерно 30 минут. Всего получилось для проверки 9207 функций.

Генерация GJB(10,4) заняло 1 минуту. Файл размером 749Mb. GJB(10,5) - 2,5 минуты, 1,8Gb.

% Проверка 17 бент-функций 10 переменных на анормальность заняло 1~час 14~мин.
